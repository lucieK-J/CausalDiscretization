}, new_device = F)
RANGEG[[i]][[test]]$spc = compute.score(u = upc.fit, alpha = alpha, ns = d)
}
spc_RANGEG = unlist(lapply(RANGEG, function(x) {x[[test]]$spc$ScorePertienceCausale} ))
sumAsupp_RANGEG = unlist(lapply(RANGEG, function(x) {x[[test]]$spc$sumAsupp} ))
sumArest_RANGEG = unlist(lapply(RANGEG, function(x) {x[[test]]$spc$sumArest} ))
truePos_RANGEG = unlist(lapply(RANGEG, function(x) {x[[test]]$ev$truePosSqlt} ))
trueNeg_RANGEG = unlist(lapply(RANGEG, function(x) {x[[test]]$ev$trueNegSqlt} ))
tempGriser1 = which(truePos_RANGEG == 1 & trueNeg_RANGEG == 1 )
tempGriser2 = split(tempGriser1, cumsum(c(1, diff(tempGriser1) != 1)))
tempGriser3 = tempGriser2
for (inter in 1:length(tempGriser2)){
tempGriser3[[inter]] = range( tempGriser2[[inter]])
}
plot.area <- function(tempGriser3, ylim = c(-1,3)){
for (inter in 1:length(tempGriser3)){
polygon(x =  rep(tempGriser3[[inter]],each = 2),                           # X-Coordinates of polygon
y = c(ylim[1], ylim[2], ylim[2], ylim[1]),                             # Y-Coordinates of polygon
col = "seashell", border = NA)
if (tempGriser3[[inter]][1] == tempGriser3[[inter]][2]){
abline(v = tempGriser3[[inter]][1], col= "seashell", lwd = 2 )
}
}
}
possible_edges = which(upper.tri(ADJ), arr.ind = T)
EDGES = vector(mode = 'list', dim(possible_edges)[1])
names(EDGES) = paste0("V",possible_edges[,1],"-V",possible_edges[,2])
for (edge in 1:dim(possible_edges)[1]){
ind_edge = possible_edges[edge,]
EDGES[[edge]] = list()
EDGES[[edge]]$pval = rep(NA, length(RANGEG))
for (i in 1:length(RANGEG)){
pvals = RANGEG[[i]][[test]]$spc$pvals
if ( typeof(pvals) == "double" ){
pvals2 = reformate2(ADJ = ADJ,
sortiePC = RANGEG[[i]][[test]]$plot,
autreMat = pvals)$Mreformat
EDGES[[edge]]$pval[i] = pvals2[ind_edge[2], ind_edge[1]]
}
}
}
for (edge in 1:dim(possible_edges)[1]){
postscript(file = paste0("results/degradation/degradationEdegeWiseSPCedge",edge,paste0(param, collapse = "_"), "_", test,".eps"),
pointsize = 18, width = 15, height = 7)
pval_RANGEG =  EDGES[[edge]]$pval
statut = "truly absent"
if ( ADJ[possible_edges[edge,1],possible_edges[edge,2] ] == 1){
statut = "truly present"
}
if ( ADJ[possible_edges[edge,2] , possible_edges[edge,1]] == 1){
statut = "truly present"
}
plot(1:length(RANGEG), pval_RANGEG, xaxt = "n" , yaxt = "n", type = 'o', ylim = c(0,1),
main = " ", xlab =" ", ylab = " ")
lines(1:length(RANGEG), pval_RANGEG, xaxt = "n", type = 'o')
axis(1, at = 1:length(RANGEG),
labels = names(RANGEG), las = 3, cex.axis=1.5)
axis(2, at =c(0,0.25,0.5,0.75,1), cex.axis=1.5)
abline(v = nbaddBound + 1 )
abline(h = alpha)
par(xpd = T )
text(length(RANGEG) +5 , alpha, expression(alpha), cex = 1.6)
dev.off()
}
}
degradation.etude.edge(EXP, nbaddBound  = nbaddBound, alpha, seed.degr = 1, test = "Mutual.Information.test", param)
library(corrplot)
require(arules)
require(stringr)
library(igraph)
library(RColorBrewer)
library(tidyr) # pour extract_numeric
library(SCCI)
library(bnlearn)
library(sna)
library(caret)
library(entropy)
plot2 <- function(x, ...){
if (is.null(x)){
plot.new()
text(x = 0.5, y = 0.5, labels = "X")
}
else plot(x, ...)
}
round2 <- function(x, ...){
if (is.character(x)){
return(x)
} else return(round(x, ...))
}
barDiagAndDiscret <- function(data, mapping, output = output...) {
print(mapping)
X = eval_data_col(data, mapping$x)
print(X)
# Aesthetic mapping:
#   * `x`      -> `Laser.Power`
# * `y`      -> `Laser.Spot.Diameter`
# * `colour` -> `dataframe$factor.Relative.Density.`
# print(str(mapping))
# List of 3
# $ x     : language ~Laser.Power
# ..- attr(*, ".Environment")=<environment: 0x0000012973a49268>
#   $ y     : language ~Laser.Spot.Diameter
# ..- attr(*, ".Environment")=<environment: 0x0000012973a49268>
#   $ colour: language ~dataframe$factor.Relative.Density.
# ..- attr(*, ".Environment")=<environment: R_GlobalEnv>
#   - attr(*, "class")= chr "uneval"
# NULL
# print(mapping$colour)
# print(mapping$x)
# <quosure>
#   expr: ^Laser.Power
# env:  0x0000012901b3de58
# print(as.character(mapping)) Petal.Width" "~Species"
# print(as.character(mapping))
# [1] "~Laser.Power"
# [2] "~Laser.Spot.Diameter"
# [3] "~dataframe$factor.Relative.Density."
# temp = as.character(mapping[c(1,2)])
# temp[1] = sub('.', '', temp[1])
# temp[2] = sub('.', '', temp[2])
# print( temp)
# print(data[,temp]) CA MARCHE !!!!
# print(data$mapping$x) affiche NULL (avec ou sans le x)
# print(mapping$x(data)) batsu
# print(data[,mapping$x]) batsu
# print(data[mapping$x]) batsu
# print(data[mapping])  batsu
discr = mdlp(cbind(X, output))
# print(colnames(data))
# cuts = list(135, "All")
# cuts = list(135, 35.04)
cuts = discr$cutp
print(cuts)
# print(cuts)
# p <- ggplot(data = data, mapping = mapping) +
#   geom_point(aes(colour = factor(output)))
# p <- ggplot(data, mapping) +
#   geom_bar(stat = "count",
#     position = "stack")
p <- ggplot(data, mapping) + geom_histogram(alpha=0.5)
# p <- ggplot(data = data, mapping = mapping)
if (cuts != "All"){
p <- p +
geom_vline(xintercept = cuts[[1]])
}
p
}
reformate <- function(ADJ, sortiePC){
# cette fonction uniformise les objets ADJ et sortiePC
# ADJ condient toutes les variables possible mais sortie PC peut avoir des suppression
# il s'agit ici de completer avec des colonne vide.
dat1=as(sortiePC, "amat")
# ref = paste0("V", colnames(ADJ))
ref = colnames(ADJ)
d = length(ref)
namessortiePC = colnames(dat1)
missingVarInd = which(!ref %in% namessortiePC)
dat2 = matrix(data = NA, nrow = d, ncol = d)
for (i in 1:d){
for (j in 1:d){
if ((i %in% missingVarInd)|(j %in% missingVarInd)){
dat2[i,j] = 0
} else dat2[i,j] = dat1[namessortiePC == paste0("V", i), namessortiePC == paste0("V", j)]
}
}
return(dat2)
}
reformate2 <- function(ADJ, sortiePC, autreMat){
# cette fonction uniformise les objets ADJ et sortiePC
# la vesion 2 permet de convertir aussi des matrice comme pvals
# ADJ condient toutes les variables possible mais sortie PC peut avoir des suppression
# il s'agit ici de completer avec des colonne vide.
dat1=as(sortiePC, "amat")
ref = colnames(ADJ)
d = length(ref)
namessortiePC = colnames(dat1)
missingVarInd = which(!ref %in% namessortiePC)
dat2 = matrix(data = NA, nrow = d, ncol = d)
autreMat2 =  matrix(data = NA, nrow = d, ncol = d)
for (i in 1:d){
for (j in 1:d){
if ((i %in% missingVarInd)|(j %in% missingVarInd)){
dat2[i,j] = 0
autreMat2[i,j] = NA
} else {dat2[i,j] = dat1[namessortiePC == paste0("V", i), namessortiePC == paste0("V", j)]
autreMat2[i,j] =  autreMat[namessortiePC == paste0("V", i), namessortiePC == paste0("V", j)] }
}
}
return(list(Greformat = dat2, Mreformat = autreMat2))
}
evaluation <-function(ADJ, sortiePC){
# sortiePC = pc.fit
d = dim(ADJ)[1]
if (is.numeric(sortiePC)){
dat2 = sortiePC
} else dat2 = reformate(ADJ, sortiePC)
dat2 = t(dat2)
shd_pcalg = pcalg::shd(as(ADJ, "graphNEL"), as(dat2, "graphNEL"))
hdist_sna = hdist(ADJ, dat2= dat2, g1=NULL, g2=NULL, normalize=FALSE, diag=FALSE, mode="digraph")
trulyPresent = sum(ADJ)
trueAbsent = d*d-d-trulyPresent
trulyPresentANDfound = 0
trulyAbsentANDErased = 0
for (i in 1:d){
for (j in 1:d){
if (i == j){next}
true1 = ADJ[i,j] == 1
pred1 = dat2[i,j] == 1
if ( true1&pred1 ){
trulyPresentANDfound = trulyPresentANDfound + 1
}
if ( (!true1)&(!pred1) ){
trulyAbsentANDErased = trulyAbsentANDErased + 1
}
}}
truePos = trulyPresentANDfound / trulyPresent
trueNeg = trulyAbsentANDErased / trueAbsent
# truePos et trueNeg (en terme de squelette)
dat2Sqlt =  ADJSqlt = matrix(0, dim(ADJ)[1], dim(ADJ)[2])
for (i in 1:dim(ADJSqlt)[1]){
for (j in 1:dim(ADJSqlt)[2]){
if (i>j){next}
ADJSqlt[i,j] = max(ADJ[i,j], ADJ[j,i])
dat2Sqlt[i,j] = max(dat2[i,j], dat2[j,i])
}
}
trulyPresentSqlt = sum(ADJSqlt)
trueAbsentSqlt = d*(d-1)/2-trulyPresentSqlt
trulyPresentANDfoundSqlt = 0
trulyAbsentANDErasedSqlt = 0
for (i in 1:d){
for (j in 1:d){
if (i == j){next}
if (i>j){next}
true1 = ADJSqlt[i,j] == 1
pred1 = dat2Sqlt[i,j] == 1
if ( true1&pred1 ){
trulyPresentANDfoundSqlt = trulyPresentANDfoundSqlt + 1
}
if ( (!true1)&(!pred1) ){
# cat(paste0(i, " et ", j, "\n"))
trulyAbsentANDErasedSqlt = trulyAbsentANDErasedSqlt + 1
}
}}
truePosSqlt = trulyPresentANDfoundSqlt / trulyPresentSqlt
trueNegSqlt = trulyAbsentANDErasedSqlt / trueAbsentSqlt
return(list(shd_pcalg = shd_pcalg, hdist_sna = hdist_sna, truePos = truePos, trueNeg = trueNeg,
truePosSqlt = truePosSqlt, trueNegSqlt = trueNegSqlt))
}
boundaryFrom2interval <- function(cats){
temp = str_split(cats, ",")
temp[[1]][2]
temp2 = temp[[2]][1]
boundary = readr::parse_number(temp2)
return(boundary)
}
mod.pc <-function(...){
arguments <- list(...)
nlevInput = arguments$suffStat$nlev
labelsInput = arguments$labels
dm = arguments$suffStat$dm
if( is.null(dm)){return(do.call(pc, arguments))}
# do.call(pc, arguments)
d = dim(dm)[2]
indToErase = rep()
for( v in 1:d ){
if (length(table(dm[,v])) == 1){
indToErase = c(indToErase, v)
}
}
if( length(indToErase) == 0 ){
return( do.call(pc, arguments) )
}
dm2 = dm[,-indToErase]
labels2 = arguments$labels[-indToErase]
nlev2 = arguments$suffStat$nlev[-indToErase]
arguments$suffStat$dm = dm2
arguments$labels = labels2
arguments$suffStat$nlev = nlev2
# si on a qu'une seule variable non constante alors c'est comme si elle l'?taient toutes
if (length(arguments$suffStat$nlev)<2){
ADJ0 = matrix(data = 0, length(nlevInput), length(nlevInput))
colnames(ADJ0) =  rownames(ADJ0) = labelsInput
return(ADJ0 )
}
return( do.call(pc, arguments) )
}
library(corrplot)
require(arules)
require(stringr)
library(igraph)
library(RColorBrewer)
library(tidyr) # pour extract_numeric
library(SCCI)
library(bnlearn)
library(sna)
library(caret)
library(entropy)
plot2 <- function(x, ...){
if (is.null(x)){
plot.new()
text(x = 0.5, y = 0.5, labels = "X")
}
else plot(x, ...)
}
round2 <- function(x, ...){
if (is.character(x)){
return(x)
} else return(round(x, ...))
}
barDiagAndDiscret <- function(data, mapping, output = output...) {
print(mapping)
X = eval_data_col(data, mapping$x)
print(X)
discr = mdlp(cbind(X, output))
cuts = discr$cutp
print(cuts)
p <- ggplot(data, mapping) + geom_histogram(alpha=0.5)
if (cuts != "All"){
p <- p +
geom_vline(xintercept = cuts[[1]])
}
p
}
reformate <- function(ADJ, sortiePC){
# this function standardizes ADJ and PC output objects
# ADJ contains all possible variables but PC output may have deletions
# it's a matter of completing with empty columns.
dat1=as(sortiePC, "amat")
# ref = paste0("V", colnames(ADJ))
ref = colnames(ADJ)
d = length(ref)
namessortiePC = colnames(dat1)
missingVarInd = which(!ref %in% namessortiePC)
dat2 = matrix(data = NA, nrow = d, ncol = d)
for (i in 1:d){
for (j in 1:d){
if ((i %in% missingVarInd)|(j %in% missingVarInd)){
dat2[i,j] = 0
} else dat2[i,j] = dat1[namessortiePC == paste0("V", i), namessortiePC == paste0("V", j)]
}
}
return(dat2)
}
reformate2 <- function(ADJ, sortiePC, autreMat){
# this function standardizes ADJ and outputPC objects
# vesion 2 also converts matrices such as pvals
# ADJ contains all possible variables but PC output can have deletions
# here, it's a matter of completing with empty columns.
dat1=as(sortiePC, "amat")
ref = colnames(ADJ)
d = length(ref)
namessortiePC = colnames(dat1)
missingVarInd = which(!ref %in% namessortiePC)
dat2 = matrix(data = NA, nrow = d, ncol = d)
autreMat2 =  matrix(data = NA, nrow = d, ncol = d)
for (i in 1:d){
for (j in 1:d){
if ((i %in% missingVarInd)|(j %in% missingVarInd)){
dat2[i,j] = 0
autreMat2[i,j] = NA
} else {dat2[i,j] = dat1[namessortiePC == paste0("V", i), namessortiePC == paste0("V", j)]
autreMat2[i,j] =  autreMat[namessortiePC == paste0("V", i), namessortiePC == paste0("V", j)] }
}
}
return(list(Greformat = dat2, Mreformat = autreMat2))
}
evaluation <-function(ADJ, sortiePC){
d = dim(ADJ)[1]
if (is.numeric(sortiePC)){
dat2 = sortiePC
} else dat2 = reformate(ADJ, sortiePC)
dat2 = t(dat2)
shd_pcalg = pcalg::shd(as(ADJ, "graphNEL"), as(dat2, "graphNEL"))
hdist_sna = hdist(ADJ, dat2= dat2, g1=NULL, g2=NULL, normalize=FALSE, diag=FALSE, mode="digraph")
trulyPresent = sum(ADJ)
trueAbsent = d*d-d-trulyPresent
trulyPresentANDfound = 0
trulyAbsentANDErased = 0
for (i in 1:d){
for (j in 1:d){
if (i == j){next}
true1 = ADJ[i,j] == 1
pred1 = dat2[i,j] == 1
if ( true1&pred1 ){
trulyPresentANDfound = trulyPresentANDfound + 1
}
if ( (!true1)&(!pred1) ){
trulyAbsentANDErased = trulyAbsentANDErased + 1
}
}}
truePos = trulyPresentANDfound / trulyPresent
trueNeg = trulyAbsentANDErased / trueAbsent
dat2Sqlt =  ADJSqlt = matrix(0, dim(ADJ)[1], dim(ADJ)[2])
for (i in 1:dim(ADJSqlt)[1]){
for (j in 1:dim(ADJSqlt)[2]){
if (i>j){next}
ADJSqlt[i,j] = max(ADJ[i,j], ADJ[j,i])
dat2Sqlt[i,j] = max(dat2[i,j], dat2[j,i])
}
}
trulyPresentSqlt = sum(ADJSqlt)
trueAbsentSqlt = d*(d-1)/2-trulyPresentSqlt
trulyPresentANDfoundSqlt = 0
trulyAbsentANDErasedSqlt = 0
for (i in 1:d){
for (j in 1:d){
if (i == j){next}
if (i>j){next}
true1 = ADJSqlt[i,j] == 1
pred1 = dat2Sqlt[i,j] == 1
if ( true1&pred1 ){
trulyPresentANDfoundSqlt = trulyPresentANDfoundSqlt + 1
}
if ( (!true1)&(!pred1) ){
trulyAbsentANDErasedSqlt = trulyAbsentANDErasedSqlt + 1
}
}}
truePosSqlt = trulyPresentANDfoundSqlt / trulyPresentSqlt
trueNegSqlt = trulyAbsentANDErasedSqlt / trueAbsentSqlt
return(list(shd_pcalg = shd_pcalg, hdist_sna = hdist_sna, truePos = truePos, trueNeg = trueNeg,
truePosSqlt = truePosSqlt, trueNegSqlt = trueNegSqlt))
}
boundaryFrom2interval <- function(cats){
temp = str_split(cats, ",")
temp[[1]][2]
temp2 = temp[[2]][1]
boundary = readr::parse_number(temp2)
return(boundary)
}
mod.pc <-function(...){
arguments <- list(...)
nlevInput = arguments$suffStat$nlev
labelsInput = arguments$labels
dm = arguments$suffStat$dm
if( is.null(dm)){return(do.call(pc, arguments))}
# do.call(pc, arguments)
d = dim(dm)[2]
indToErase = rep()
for( v in 1:d ){
if (length(table(dm[,v])) == 1){
indToErase = c(indToErase, v)
}
}
if( length(indToErase) == 0 ){
return( do.call(pc, arguments) )
}
dm2 = dm[,-indToErase]
labels2 = arguments$labels[-indToErase]
nlev2 = arguments$suffStat$nlev[-indToErase]
arguments$suffStat$dm = dm2
arguments$labels = labels2
arguments$suffStat$nlev = nlev2
if (length(arguments$suffStat$nlev)<2){
ADJ0 = matrix(data = 0, length(nlevInput), length(nlevInput))
colnames(ADJ0) =  rownames(ADJ0) = labelsInput
return(ADJ0 )
}
return( do.call(pc, arguments) )
}
# Kernel conditional independence test
library(CondIndTests)
kci.test <- function(x, y, S, suffStat){
dm = suffStat$dm
dm = data.frame(dm)
Y = dm[,x]
E = dm[,y]
X = dm[,S] # conditional var
if (length(X) != 0){
pv = KCI(Y, E, X)$pvalue # super long ...
}else  pv = KCI(Y, E, rep(0,dim(dm)[1]))$pvalue
return(pv)
}
Jonckheere.Terpstra.test <- function(x, y, S, suffStat){
# suffStat : list(dm)
require(bnlearn)
dm = suffStat$dm
dm =  data.frame(dm)
for (v in 1:dim(dm)[2]){
dm[, v] = as.ordered(dm[, v])
}
if (length(S) == 0){
p = bnlearn::ci.test(x = dm[,x] , y = dm[,y],  test = "jt" )$p.value
# cat(paste("et p =", p, " !"))
} else {  p = bnlearn::ci.test(x = dm[,x] , y = dm[,y], z =  dm[,S],  test = "jt" )$p.value}
p = as.numeric(p)
return(p)
}
Mutual.Information.test <- function(x, y, S, suffStat){
# suffStat : list(dm)
dm = suffStat$dm
dm =  data.frame(dm)
for (v in 1:dim(dm)[2]){
dm[, v] = as.factor(dm[, v])
}
if (length(S) == 0){
p = ci.test(x = dm[,x] , y = dm[,y], test = "mi" )$p.value
} else   p = ci.test(x = dm[,x] , y = dm[,y], z = dm[,S], test = "mi" )$p.value
return(p)
}
Mutual.Information.test <- function(x, y, S, suffStat){
# suffStat : list(dm)
dm = suffStat$dm
dm =  data.frame(dm)
for (v in 1:dim(dm)[2]){
dm[, v] = as.factor(dm[, v])
}
if (length(S) == 0){
p = ci.test(x = dm[,x] , y = dm[,y], test = "mi" )$p.value
} else   p = ci.test(x = dm[,x] , y = dm[,y], z = dm[,S], test = "mi" )$p.value
return(p)
}
